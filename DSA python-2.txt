EQUILIBRIUM POINT PROBLEM
1)Given an array arr of non-negative numbers. The task is to find the first equilibrium point in an array. The equilibrium point in an array is an index (or position) such that the sum of all elements before that index is the same as the sum of elements after it.

Note: Return equilibrium point in 1-based indexing. Return -1 if no such point exists. 

Examples:

Input: arr[] = [1, 3, 5, 2, 2]
Output: 3 
Explanation: The equilibrium point is at position 3 as the sum of elements before it (1+3) = sum of elements after it (2+2). 
Input: arr[] = [1]
Output: 1
Explanation: Since there's only one element hence it's only the equilibrium point.
Input: n = 3, arr[] = [1, 2, 3]
Output: -1
Explanation: There is no equilibrium point in the given array.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= arr.size <= 105
0 <= arr[i] <= 109


PROGRAM:-
def equilibrium(n,arr):
    total_sum=sum(arr)
    left_sum=0
    for i in range(len(arr)):
        total_sum-=arr[i]
        if total_sum==left_sum:
            return i+1
        left_sum+=arr[i]
    return -1
n=int(input("Enter the number of elements\n"))
arr=list(map(int,input("Enter the number of elements in the array\n").split()))
result=equilibrium(n,arr)
if result==-1:
    print("There is no equilibrium in array")
else:
    print(result)

EXPLANATION:-
We solve this problem by using a single pass approach. The idea is to calculate the total sum of the array, then iterate through the array while keeping track of the sum of elements to the left of the current index. At each step, we subtract the current element from the total sum and check if the left sum is equal to the remaining sum (which would be the right sum).

-------------------------------------------------------------------------------------------------------------------------------------
